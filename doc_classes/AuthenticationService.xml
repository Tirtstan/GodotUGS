<?xml version="1.0" encoding="UTF-8"?>
<class name="AuthenticationService" inherits="Object"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		The [code]AuthenticationService[/code] Singleton handles all things related to user authentication, like signing up, managing sessions, and fetching user data such as their access token, player ID and name.
	</brief_description>
	<description>
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_username_password">
			<return type="void" />
			<param index="0" name="username" type="String" />
			<param index="1" name="password" type="String" />
			<description>
				Sign up with a new username/password and add it to the current logged in user.
			</description>
		</method>
		<method name="clear_session_token">
			<return type="void" />
			<description>
				Deletes the session token if it exists.
			</description>
		</method>
		<method name="delete_account">
			<return type="void" />
			<description>
				Deletes the currently signed in player permanently.
			</description>
		</method>
		<method name="does_session_token_exist" qualifiers="const">
			<return type="bool" />
			<description>
				Check if there is an existing session token stored for the current profile.
			</description>
		</method>
		<method name="get_access_token" qualifiers="const">
			<return type="String" />
			<description>
				Returns the current player's access token when they are signed in, otherwise empty.
			</description>
		</method>
		<method name="get_last_notification_date" qualifiers="const">
			<return type="String" />
			<description>
				The date the last notification for the player was created or empty if there are no notifications.
			</description>
		</method>
		<method name="get_player_id" qualifiers="const">
			<return type="String" />
			<description>
				Returns the current player's ID. This value is cached between sessions.
			</description>
		</method>
		<method name="get_player_name" qualifiers="const">
			<return type="String" />
			<description>
				Returns the current player's name. This value is cached between sessions.
			</description>
		</method>
		<method name="is_signed_in" qualifiers="const">
			<return type="bool" />
			<description>
				Checks whether the player is signed in or not. A player can remain signed in but have an expired session.
			</description>
		</method>
		<method name="sign_in_anonymously">
			<return type="void" />
			<description>
				Signs in the current player anonymously. No credentials are required and the session is confined to the current device.
				[i][b]Note:[/b] If a player has signed in previously with a session token stored on the device, they are signed back in regardless of if they're an anonymous player or not.[/i]
			</description>
		</method>
		<method name="sign_in_with_username_password">
			<return type="void" />
			<param index="0" name="username" type="String" />
			<param index="1" name="password" type="String" />
			<description>
				Sign in using username and password credentials.
			</description>
		</method>
		<method name="sign_out">
			<return type="void" />
			<param index="0" name="clear_credentials" type="bool" />
			<description>
				Sign out the current player. [code]clear_credentials[/code] to clear the session token that enables logging in to the same account.
			</description>
		</method>
		<method name="sign_up_with_username_password">
			<return type="void" />
			<param index="0" name="username" type="String" />
			<param index="1" name="password" type="String" />
			<description>
				Sign up using username and password credentials.
				[i][b]Note:[/b] The [u]username[/u] of the player must be unique per project and contains 3-20 characters of alphanumeric and/or these special characters [. - @ _]. The [u]password[/u] of the player must contain 8-30 characters with at least 1 uppercase, 1 lower case, 1 number, and 1 special character.[/i]
			</description>
		</method>
		<method name="update_password">
			<return type="void" />
			<param index="0" name="current_password" type="String" />
			<param index="1" name="new_password" type="String" />
			<description>
				Update password credentials for the username/password user.
			</description>
		</method>
	</methods>
	<members>
		<member name="profile" type="String" setter="set_profile" getter="get_profile"
			default="&quot;DefaultProfile&quot;">
			The profile isolates the values saved to the config file. You can use profiles to sign in to multiple accounts on a single device.
		</member>
	</members>
	<signals>
		<signal name="on_error">
			<param index="0" name="error" type="int" />
			<param index="1" name="error_message" type="String" />
			<description>
				Emitted when an error occurs during any request. Provides the error code and message.
			</description>
		</signal>
		<signal name="on_signed_in">
			<description>
				Emitted when a sign-in attempt has completed successfully.
			</description>
		</signal>
		<signal name="on_signed_out">
			<description>
				Emitted when a sign-out attempt has completed successfully.
			</description>
		</signal>
	</signals>
</class>